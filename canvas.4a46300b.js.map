{"version":3,"sources":["src/canvas.js"],"names":["nextUp","$","document","ready","windowWidth","window","innerWidth","container","innerHeight","querySelector","scrollHeight","canvas","getElementById","w","width","h","height","ctx","getContext","tileSize","generateDiagonals","clearRect","y","x","leftToRight","Math","random","xOffset","yOffset","beginPath","strokeStyle","floor","moveTo","lineTo","stroke","generateHorVertLines","vertical","console","log","drawNextUp","generateOverlapDiagonals","maybeNext","on","resize","min","max"],"mappings":"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","file":"canvas.4a46300b.js","sourceRoot":"..","sourcesContent":["let nextUp = 2;\n\n$(document).ready(function() {\n\n  // canvas\n  let windowWidth = window.innerWidth;\n  let windowHeight = window.innerHeight;\n  const container = document.querySelector('.container');\n  let scrollHeight = container.scrollHeight;\n\n  const canvas = document.getElementById('myCanvas');\n  let w = canvas.width = windowWidth;\n  let h = canvas.height = scrollHeight;\n\n  const ctx = canvas.getContext('2d');\n  const tileSize = 30;\n\n  function generateDiagonals(ctx, tileSize, w, h) {\n    ctx.clearRect(0, 0, w, h);\n    for (let y = 0; y <= (h / tileSize); y++) {\n      for (let x = 0; x <= (w / tileSize); x++) {\n        const leftToRight = Math.random() >= .5;\n        const xOffset = x * tileSize;\n        const yOffset = y * tileSize;\n        ctx.beginPath();\n        ctx.strokeStyle = `rgba(${Math.floor(255 - ((y + 1) * 2))}, 100, ${Math.floor(255 - ((x + 1) * 15))}, 0.5)`;\n        if (leftToRight) {\n          // draw  left to right line = \\\n          ctx.moveTo(xOffset, yOffset);\n          ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n        } else {\n          // draw  right to left line = /\n          ctx.moveTo(xOffset + tileSize, yOffset);\n          ctx.lineTo(xOffset, yOffset + tileSize);\n        }\n        ctx.stroke();\n      }\n    }\n  };\n\n  function generateOverlapDiagonals(ctx, tileSize, w, h) {\n    ctx.clearRect(0, 0, w, h);\n    for (let y = 0; y <= (h / tileSize); y++) {\n      for (let x = 0; x <= (w / tileSize); x++) {\n        const leftToRight = Math.random() >= .5;\n        const xOffset = x * tileSize;\n        const yOffset = y * tileSize;\n        ctx.beginPath();\n        ctx.strokeStyle = `rgba(${Math.floor(200 - (y * 2))}, ${Math.floor(50 + (x * 5))}, 100, 0.5)`;\n        if (leftToRight) {\n          // draw  left to right line = \\\n          ctx.moveTo(xOffset, yOffset);\n          ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n        } else {\n          // draw  right to left line = /\n          ctx.moveTo(xOffset, yOffset);\n          ctx.lineTo(xOffset - tileSize, yOffset + tileSize);\n        }\n        ctx.stroke();\n      }\n    }\n  };\n\n  function generateHorVertLines(ctx, tileSize, w, h) {\n    ctx.clearRect(0, 0, w, h);\n    for (let y = 0; y <= (h / tileSize); y++) {\n      for (let x = 0; x <= (w / tileSize); x++) {\n        const vertical = Math.random() >= .5;\n        const xOffset = x * tileSize;\n        const yOffset = y * tileSize;\n        ctx.beginPath();\n        ctx.strokeStyle = `rgba(${Math.floor(50 - ((x * 2)))}, ${Math.floor(200 - ((y + 1) * 2))}, ${Math.floor(100 + ((x * 5)))}, 0.5)`;\n        console.log(ctx.strokeStyle);\n        \n        if (vertical) {\n          // draw vertical line = |\n          ctx.moveTo(xOffset, yOffset);\n          ctx.lineTo(xOffset, yOffset + tileSize);\n        } else {\n          // draw horizontal line = --\n          ctx.moveTo(xOffset, yOffset);\n          ctx.lineTo(xOffset + tileSize, yOffset);\n        }\n        ctx.stroke();\n      }\n    }\n  };\n\n  // generate pattern initially & on refresh\n  generateDiagonals(ctx, tileSize, w, h);\n\n  // define function for which pattern to draw next\n  function drawNextUp() {\n    if (nextUp === 1) {\n      generateOverlapDiagonals(ctx, tileSize, w, h);\n      // nextUp = 'b';\n    } else if (nextUp === 2) {\n      generateHorVertLines(ctx, tileSize, w, h);\n      // nextUp = 'c';\n    } else if (nextUp === 3) {\n      generateDiagonals(ctx, tileSize, w, h);\n    }\n\n    let maybeNext = random(1,3);\n    while (maybeNext === nextUp) {\n      maybeNext = random(1,3);\n    }\n    nextUp = maybeNext;\n  };\n\n  // do it againnnnnn on each click, alternating\n  $('body, a').on('click', function(){\n    drawNextUp();\n  });\n\n  $(window).resize(function() {\n    windowWidth = window.innerWidth;\n    scrollHeight = container.scrollHeight;\n    w = canvas.width = windowWidth;\n    h = canvas.height = scrollHeight;\n    generateHorVertLines(ctx, tileSize, w, h);\n    nextUp = 3;\n  });\n\n}); // end of doc ready\n\nconst random = function(min,max) {\n  // getting a random integer:\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n"]}