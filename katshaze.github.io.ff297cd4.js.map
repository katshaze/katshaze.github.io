{"version":3,"sources":["src/animations.js","src/canvas.js","index.js"],"names":["scrollSomewhere","fromId","toId","document","getElementById","addEventListener","e","preventDefault","scrollIntoView","behavior","startScrollEventListeners","windowWidth","window","innerWidth","container","querySelector","scrollHeight","canvas","w","width","h","height","ctx","getContext","tileSize","generateDiagonals","clearRect","y","x","leftToRight","Math","random","xOffset","yOffset","beginPath","strokeStyle","floor","moveTo","lineTo","stroke","generateOverlapDiagonals","generateHorVertLines","vertical","randomInteger","min","max","nextUp","drawNextUp","maybeNext","generateBackground","clickableElements","querySelectorAll","i","length","onresize"],"mappings":"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","file":"katshaze.github.io.ff297cd4.js","sourceRoot":"..","sourcesContent":["// generic scroll somewhere function\nconst scrollSomewhere = function (fromId, toId) {  \n  document.getElementById(`${fromId}`).addEventListener(\"click\", function (e) {\n    // prevent it from updating the url\n    e.preventDefault();\n    document.getElementById(`${toId}`).scrollIntoView({ behavior: \"smooth\" });\n  });\n};\n\n// function to start event listeners for scrolling\nexport function startScrollEventListeners() {\n  // navigate home\n  scrollSomewhere(\"home-nav\", \"home-anchor\");\n  // scroll up home from footer\n  scrollSomewhere(\"foot-nav\", \"home-anchor\");\n  // navigate to about section\n  scrollSomewhere(\"about-nav\", \"about-anchor\");\n  // scroll down from end of intro to about\n  scrollSomewhere(\"intro-arrows\", \"about-anchor\");\n  // navigate to projects\n  scrollSomewhere(\"projects-nav\", \"projects-anchor\");\n  // scroll down from end of about to projects\n  scrollSomewhere(\"about-arrows\", \"projects-anchor\");\n};\n","// set up canvas\nlet windowWidth = window.innerWidth;\nconst container = document.querySelector(\".container\");\nlet scrollHeight = container.scrollHeight;\n\nconst canvas = document.getElementById(\"myCanvas\");\nlet w = (canvas.width = windowWidth);\nlet h = (canvas.height = scrollHeight);\n\nconst ctx = canvas.getContext(\"2d\");\nconst tileSize = 30;\n\nconst generateDiagonals = function (ctx, tileSize, w, h) {\n  ctx.clearRect(0, 0, w, h);\n  for (let y = 0; y <= h / tileSize; y++) {\n    for (let x = 0; x <= w / tileSize; x++) {\n      const leftToRight = Math.random() >= 0.5;\n      const xOffset = x * tileSize;\n      const yOffset = y * tileSize;\n      ctx.beginPath();\n      ctx.strokeStyle = `rgba(${Math.floor(\n        255 - (y + 1) * 2\n      )}, 100, ${Math.floor(255 - (x + 1) * 15)}, 0.5)`;\n      if (leftToRight) {\n        // draw  left to right line = \\\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n      } else {\n        // draw  right to left line = /\n        ctx.moveTo(xOffset + tileSize, yOffset);\n        ctx.lineTo(xOffset, yOffset + tileSize);\n      }\n      ctx.stroke();\n    }\n  }\n};\n\nconst generateOverlapDiagonals = function (ctx, tileSize, w, h) {\n  ctx.clearRect(0, 0, w, h);\n  for (let y = 0; y <= h / tileSize; y++) {\n    for (let x = 0; x <= w / tileSize; x++) {\n      const leftToRight = Math.random() >= 0.5;\n      const xOffset = x * tileSize;\n      const yOffset = y * tileSize;\n      ctx.beginPath();\n      ctx.strokeStyle = `rgba(${Math.floor(150 - y * 2)}, ${Math.floor(\n        150 - x * 5\n      )}, 150, 0.5)`;\n      if (leftToRight) {\n        // draw  left to right line = \\\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n      } else {\n        // draw  right to left line = /\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset - tileSize, yOffset + tileSize);\n      }\n      ctx.stroke();\n    }\n  }\n};\n\nconst generateHorVertLines = function (ctx, tileSize, w, h) {\n  ctx.clearRect(0, 0, w, h);\n  for (let y = 0; y <= h / tileSize; y++) {\n    for (let x = 0; x <= w / tileSize; x++) {\n      const vertical = Math.random() >= 0.5;\n      const xOffset = x * tileSize;\n      const yOffset = y * tileSize;\n      ctx.beginPath();\n      ctx.strokeStyle = `rgba(${Math.floor(150 - y * 2)}, ${Math.floor(\n        200 - (x + 1) * 5\n      )}, ${Math.floor(10 + y * 2)}, 0.5)`;\n\n      if (vertical) {\n        // draw vertical line = |\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset, yOffset + tileSize);\n      } else {\n        // draw horizontal line = --\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset + tileSize, yOffset);\n      }\n      ctx.stroke();\n    }\n  }\n};\n\nconst randomInteger = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Determine which pattern to draw next\nlet nextUp = 2;\n\nconst drawNextUp = function () {\n  if (nextUp === 1) {\n    generateOverlapDiagonals(ctx, tileSize, w, h);\n    // nextUp = 'b';\n  } else if (nextUp === 2) {\n    generateHorVertLines(ctx, tileSize, w, h);\n    // nextUp = 'c';\n  } else if (nextUp === 3) {\n    generateDiagonals(ctx, tileSize, w, h);\n  }\n\n  let maybeNext = randomInteger(1, 3);\n  while (maybeNext === nextUp) {\n    maybeNext = randomInteger(1, 3);\n  }\n  nextUp = maybeNext;\n};\n\nexport function generateBackground() {\n  // generate pattern initially & on refresh\n  generateDiagonals(ctx, tileSize, w, h);\n\n  // generate new pattern at random on click\n  const clickableElements = document.querySelectorAll(\"body, a\");\n  for (let i = 0; i < clickableElements.length; i++) {    \n    addEventListener(\"click\", function () {\n      drawNextUp();\n    });\n  }\n\n  // regenerate one of the patterns if window is resized\n  window.onresize = function () {\n    windowWidth = window.innerWidth;\n    scrollHeight = container.scrollHeight;\n    w = canvas.width = windowWidth;\n    h = canvas.height = scrollHeight;\n    generateHorVertLines(ctx, tileSize, w, h);\n    nextUp = 3;\n  };\n}\n","import \"./css/style.css\";\nimport \"normalize.css\";\n\nimport { startScrollEventListeners } from \"./src/animations\";\nimport { generateBackground } from \"./src/canvas\";\n\nstartScrollEventListeners();\ngenerateBackground();\n"]}