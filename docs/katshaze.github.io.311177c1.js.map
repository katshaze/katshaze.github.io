{"mappings":"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","sources":["<anon>","index.js","src/canvas.js"],"sourcesContent":["\n\n\n\n// set up canvas\nlet $8c8f5b49f3a70fa1$var$windowWidth = window.innerWidth;\nlet $8c8f5b49f3a70fa1$var$windowHeight = window.innerHeight;\nconst $8c8f5b49f3a70fa1$var$canvas = document.getElementById(\"myCanvas\");\nlet $8c8f5b49f3a70fa1$var$w = $8c8f5b49f3a70fa1$var$canvas.width = $8c8f5b49f3a70fa1$var$windowWidth;\nlet $8c8f5b49f3a70fa1$var$h = $8c8f5b49f3a70fa1$var$canvas.height = $8c8f5b49f3a70fa1$var$windowHeight;\nconst $8c8f5b49f3a70fa1$var$ctx = $8c8f5b49f3a70fa1$var$canvas.getContext(\"2d\");\n// Constants\nconst $8c8f5b49f3a70fa1$var$TILE_SIZE = 30;\nconst $8c8f5b49f3a70fa1$var$TRANSPARENCY = 0.4;\nconst $8c8f5b49f3a70fa1$var$generateDiagonals = function(ctx, tileSize, w, h) {\n    ctx.clearRect(0, 0, w, h);\n    // Randomly determine gradient direction\n    const gradientDirection = Math.floor(Math.random() * 2); // 0 = horizontal, 1 = vertical\n    for(let y = 0; y <= h / tileSize; y++)for(let x = 0; x <= w / tileSize; x++){\n        const leftToRight = Math.random() >= 0.5;\n        const xOffset = x * tileSize;\n        const yOffset = y * tileSize;\n        ctx.beginPath();\n        // Set the stroke style based on the gradient direction\n        if (gradientDirection === 0) // Horizontal gradient\n        ctx.strokeStyle = `rgba(${Math.floor(255 - (x + 1) * 1)}, 100, ${Math.floor(255 - (x + 1) * 10)}, ${$8c8f5b49f3a70fa1$var$TRANSPARENCY})`;\n        else // Vertical gradient\n        ctx.strokeStyle = `rgba(${Math.floor(255 - (y + 1) * 1)}, 100, ${Math.floor(255 - (y + 1) * 10)}, ${$8c8f5b49f3a70fa1$var$TRANSPARENCY})`;\n        // Draw the diagonal lines\n        if (leftToRight) {\n            // draw left to right line = \\\n            ctx.moveTo(xOffset, yOffset);\n            ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n        } else {\n            // draw right to left line = /\n            ctx.moveTo(xOffset + tileSize, yOffset);\n            ctx.lineTo(xOffset, yOffset + tileSize);\n        }\n        ctx.stroke();\n    }\n};\nconst $8c8f5b49f3a70fa1$var$generateOverlapDiagonals = function(ctx, tileSize, w, h) {\n    ctx.clearRect(0, 0, w, h);\n    // Randomly determine gradient direction\n    const gradientDirection = Math.floor(Math.random() * 2); // 0 = horizontal, 1 = vertical\n    for(let y = 0; y <= h / tileSize; y++)for(let x = 0; x <= w / tileSize; x++){\n        const leftToRight = Math.random() >= 0.5;\n        const xOffset = x * tileSize;\n        const yOffset = y * tileSize;\n        ctx.beginPath();\n        // Set the stroke style based on the gradient direction\n        if (gradientDirection === 0) ctx.strokeStyle = `rgba(${Math.floor(150 - x * 2)}, ${Math.floor(150 - x * 5)}, 150, ${$8c8f5b49f3a70fa1$var$TRANSPARENCY})`;\n        else ctx.strokeStyle = `rgba(${Math.floor(150 - y * 2)}, ${Math.floor(150 - y * 5)}, 150, ${$8c8f5b49f3a70fa1$var$TRANSPARENCY})`;\n        // Draw the overlapped diagonal lines\n        if (leftToRight) {\n            // draw  left to right line = \\\n            ctx.moveTo(xOffset, yOffset);\n            ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n        } else {\n            // draw  right to left line = /\n            ctx.moveTo(xOffset, yOffset);\n            ctx.lineTo(xOffset - tileSize, yOffset + tileSize);\n        }\n        ctx.stroke();\n    }\n};\nconst $8c8f5b49f3a70fa1$var$randomInteger = function(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n// Determine which pattern to draw next\nlet $8c8f5b49f3a70fa1$var$nextUp = 2;\nconst $8c8f5b49f3a70fa1$var$drawNextUp = function() {\n    if ($8c8f5b49f3a70fa1$var$nextUp === 1) $8c8f5b49f3a70fa1$var$generateOverlapDiagonals($8c8f5b49f3a70fa1$var$ctx, $8c8f5b49f3a70fa1$var$TILE_SIZE, $8c8f5b49f3a70fa1$var$w, $8c8f5b49f3a70fa1$var$h);\n    else $8c8f5b49f3a70fa1$var$generateDiagonals($8c8f5b49f3a70fa1$var$ctx, $8c8f5b49f3a70fa1$var$TILE_SIZE, $8c8f5b49f3a70fa1$var$w, $8c8f5b49f3a70fa1$var$h);\n    let maybeNext = $8c8f5b49f3a70fa1$var$randomInteger(1, 2);\n    while(maybeNext === $8c8f5b49f3a70fa1$var$nextUp)maybeNext = $8c8f5b49f3a70fa1$var$randomInteger(1, 2);\n    $8c8f5b49f3a70fa1$var$nextUp = maybeNext;\n};\nfunction $8c8f5b49f3a70fa1$export$88a114ff681f001() {\n    // generate pattern initially & on refresh\n    $8c8f5b49f3a70fa1$var$generateDiagonals($8c8f5b49f3a70fa1$var$ctx, $8c8f5b49f3a70fa1$var$TILE_SIZE, $8c8f5b49f3a70fa1$var$w, $8c8f5b49f3a70fa1$var$h);\n    // generate new pattern at random on click\n    const clickableElements = document.querySelectorAll(\"body, a\");\n    for(let i = 0; i < clickableElements.length; i++)addEventListener(\"pointerdown\", (event)=>{\n        event.preventDefault(); // Prevent scrolling or zooming\n        $8c8f5b49f3a70fa1$var$drawNextUp();\n    });\n    // regenerate one of the patterns if window is resized\n    window.onresize = function() {\n        $8c8f5b49f3a70fa1$var$windowWidth = window.innerWidth;\n        $8c8f5b49f3a70fa1$var$windowHeight = window.innerHeight;\n        $8c8f5b49f3a70fa1$var$w = $8c8f5b49f3a70fa1$var$canvas.width = $8c8f5b49f3a70fa1$var$windowWidth;\n        $8c8f5b49f3a70fa1$var$h = $8c8f5b49f3a70fa1$var$canvas.height = $8c8f5b49f3a70fa1$var$windowHeight;\n        $8c8f5b49f3a70fa1$var$generateDiagonals($8c8f5b49f3a70fa1$var$ctx, $8c8f5b49f3a70fa1$var$TILE_SIZE, $8c8f5b49f3a70fa1$var$w, $8c8f5b49f3a70fa1$var$h);\n        $8c8f5b49f3a70fa1$var$nextUp = 2;\n    };\n}\n\n\n(0, $8c8f5b49f3a70fa1$export$88a114ff681f001)();\n\n\n//# sourceMappingURL=katshaze.github.io.311177c1.js.map\n","import \"normalize.css\";\nimport \"@fortawesome/fontawesome-free/css/brands.css\";\nimport \"@fortawesome/fontawesome-free/css/fontawesome.css\";\nimport \"./styles/styles.css\";\nimport { generateBackground } from \"./src/canvas\";\n\ngenerateBackground();\n","// set up canvas\nlet windowWidth = window.innerWidth;\nlet windowHeight = window.innerHeight;\n\nconst canvas = document.getElementById(\"myCanvas\");\nlet w = (canvas.width = windowWidth);\nlet h = (canvas.height = windowHeight);\n\nconst ctx = canvas.getContext(\"2d\");\n\n// Constants\nconst TILE_SIZE = 30;\nconst TRANSPARENCY = 0.4;\n\nconst generateDiagonals = function (ctx, tileSize, w, h) {\n  ctx.clearRect(0, 0, w, h);\n\n  // Randomly determine gradient direction\n  const gradientDirection = Math.floor(Math.random() * 2); // 0 = horizontal, 1 = vertical\n\n  for (let y = 0; y <= h / tileSize; y++) {\n    for (let x = 0; x <= w / tileSize; x++) {\n      const leftToRight = Math.random() >= 0.5;\n      const xOffset = x * tileSize;\n      const yOffset = y * tileSize;\n\n      ctx.beginPath();\n\n      // Set the stroke style based on the gradient direction\n      if (gradientDirection === 0) {\n        // Horizontal gradient\n        ctx.strokeStyle = `rgba(${Math.floor(255 - (x + 1) * 1)}, 100, ${Math.floor(\n          255 - (x + 1) * 10\n        )}, ${TRANSPARENCY})`;\n      } else {\n        // Vertical gradient\n        ctx.strokeStyle = `rgba(${Math.floor(255 - (y + 1) * 1)}, 100, ${Math.floor(\n          255 - (y + 1) * 10\n        )}, ${TRANSPARENCY})`;\n      }\n\n      // Draw the diagonal lines\n      if (leftToRight) {\n        // draw left to right line = \\\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n      } else {\n        // draw right to left line = /\n        ctx.moveTo(xOffset + tileSize, yOffset);\n        ctx.lineTo(xOffset, yOffset + tileSize);\n      }\n      ctx.stroke();\n    }\n  }\n};\n\nconst generateOverlapDiagonals = function (ctx, tileSize, w, h) {\n  ctx.clearRect(0, 0, w, h);\n  // Randomly determine gradient direction\n  const gradientDirection = Math.floor(Math.random() * 2); // 0 = horizontal, 1 = vertical\n\n  for (let y = 0; y <= h / tileSize; y++) {\n    for (let x = 0; x <= w / tileSize; x++) {\n      const leftToRight = Math.random() >= 0.5;\n      const xOffset = x * tileSize;\n      const yOffset = y * tileSize;\n\n      ctx.beginPath();\n\n      // Set the stroke style based on the gradient direction\n      if (gradientDirection === 0) {\n        ctx.strokeStyle = `rgba(${Math.floor(150 - x * 2)}, ${Math.floor(\n          150 - x * 5\n        )}, 150, ${TRANSPARENCY})`;\n      } else {\n        ctx.strokeStyle = `rgba(${Math.floor(150 - y * 2)}, ${Math.floor(\n          150 - y * 5\n        )}, 150, ${TRANSPARENCY})`;\n      }\n\n      // Draw the overlapped diagonal lines\n      if (leftToRight) {\n        // draw  left to right line = \\\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset + tileSize, yOffset + tileSize);\n      } else {\n        // draw  right to left line = /\n        ctx.moveTo(xOffset, yOffset);\n        ctx.lineTo(xOffset - tileSize, yOffset + tileSize);\n      }\n      ctx.stroke();\n    }\n  }\n};\n\nconst randomInteger = function (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Determine which pattern to draw next\nlet nextUp = 2;\n\nconst drawNextUp = function () {\n  if (nextUp === 1) {\n    generateOverlapDiagonals(ctx, TILE_SIZE, w, h);\n  } else {\n    generateDiagonals(ctx, TILE_SIZE, w, h);\n  }\n\n  let maybeNext = randomInteger(1, 2);\n  while (maybeNext === nextUp) {\n    maybeNext = randomInteger(1, 2);\n  }\n  nextUp = maybeNext;\n};\n\nexport function generateBackground() {\n  // generate pattern initially & on refresh\n  generateDiagonals(ctx, TILE_SIZE, w, h);\n\n  // generate new pattern at random on click\n  const clickableElements = document.querySelectorAll(\"body, a\");\n  for (let i = 0; i < clickableElements.length; i++) {\n    addEventListener(\"pointerdown\", (event) => {\n      event.preventDefault(); // Prevent scrolling or zooming\n      drawNextUp();\n    });\n  }\n\n  // regenerate one of the patterns if window is resized\n  window.onresize = function () {\n    windowWidth = window.innerWidth;\n    windowHeight = window.innerHeight;\n    w = canvas.width = windowWidth;\n    h = canvas.height = windowHeight;\n    generateDiagonals(ctx, TILE_SIZE, w, h);\n    nextUp = 2;\n  };\n}\n"],"names":["$8c8f5b49f3a70fa1$var$windowWidth","window","innerWidth","$8c8f5b49f3a70fa1$var$windowHeight","innerHeight","$8c8f5b49f3a70fa1$var$canvas","document","getElementById","$8c8f5b49f3a70fa1$var$w","width","$8c8f5b49f3a70fa1$var$h","height","$8c8f5b49f3a70fa1$var$ctx","getContext","$8c8f5b49f3a70fa1$var$generateDiagonals","ctx","tileSize","w","h","clearRect","gradientDirection","Math","floor","random","y","x","leftToRight","xOffset","yOffset","beginPath","strokeStyle","moveTo","lineTo","stroke","$8c8f5b49f3a70fa1$var$generateOverlapDiagonals","$8c8f5b49f3a70fa1$var$randomInteger","min","max","$8c8f5b49f3a70fa1$var$nextUp","$8c8f5b49f3a70fa1$var$drawNextUp","maybeNext","clickableElements","querySelectorAll","i","length","addEventListener","event","preventDefault","onresize"],"version":3,"file":"katshaze.github.io.311177c1.js.map"}